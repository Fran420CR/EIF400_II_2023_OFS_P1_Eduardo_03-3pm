:- use_module(library(http/thread_httpd)).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/http_json)).
:- use_module(library(http/http_parameters)).
:- use_module(library(http/http_client)).
:- use_module(library(http/http_json)).

% Define una ruta para recibir la salida del archivo TypeScript
:- http_handler(root(test_output), handle_test_output, [method(post)]).

% Manejador para recibir la salida del archivo TypeScript
handle_test_output(Request) :-
    http_read_json_dict(Request, Data), % Lee los datos enviados en formato JSON
    get_time(TimeStamp),
    format_time(atom(TimeStampStr, '%Y-%m-%d %H:%M:%S', TimeStamp),
    Comment = "// Generated by Prolog OFS 1.5 transpiler " + TimeStampStr + "\n",
    ModifiedData = Comment + Data.content, % Agrega el comentario al inicio
    Reply = json{content: ModifiedData}, % Prepara la respuesta con los datos modificados
    reply_json(Reply).


% Inicia el servidor en un puerto especÃ­fico
% :- http_server(http_dispatch, [port(8000)]).
:- initialization
    format(' Starting Server ~n', []),
    (current_prologflag(argv, [SPort | ]) -> true ; SPort='8000'),
    atom_number(SPort, Port),
    format(' Serving on port ~d  ~n', [Port]),
    set_setting_default(http:cors, [*]), % Allows cors for every
    server(Port).